// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "hop/start_wars/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVehicleRepository is a mock of IVehicleRepository interface.
type MockIVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIVehicleRepositoryMockRecorder
}

// MockIVehicleRepositoryMockRecorder is the mock recorder for MockIVehicleRepository.
type MockIVehicleRepositoryMockRecorder struct {
	mock *MockIVehicleRepository
}

// NewMockIVehicleRepository creates a new mock instance.
func NewMockIVehicleRepository(ctrl *gomock.Controller) *MockIVehicleRepository {
	mock := &MockIVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockIVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVehicleRepository) EXPECT() *MockIVehicleRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIVehicleRepository) Get(ctx context.Context) (*[]models.Starship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*[]models.Starship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIVehicleRepositoryMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIVehicleRepository)(nil).Get), ctx)
}
