// Code generated by MockGen. DO NOT EDIT.
// Source: vehice_extend_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "hop/start_wars/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVehicleExtendRepository is a mock of IVehicleExtendRepository interface.
type MockIVehicleExtendRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIVehicleExtendRepositoryMockRecorder
}

// MockIVehicleExtendRepositoryMockRecorder is the mock recorder for MockIVehicleExtendRepository.
type MockIVehicleExtendRepositoryMockRecorder struct {
	mock *MockIVehicleExtendRepository
}

// NewMockIVehicleExtendRepository creates a new mock instance.
func NewMockIVehicleExtendRepository(ctrl *gomock.Controller) *MockIVehicleExtendRepository {
	mock := &MockIVehicleExtendRepository{ctrl: ctrl}
	mock.recorder = &MockIVehicleExtendRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVehicleExtendRepository) EXPECT() *MockIVehicleExtendRepositoryMockRecorder {
	return m.recorder
}

// Decrement mocks base method.
func (m *MockIVehicleExtendRepository) Decrement(ctx context.Context, model string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrement", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrement indicates an expected call of Decrement.
func (mr *MockIVehicleExtendRepositoryMockRecorder) Decrement(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrement", reflect.TypeOf((*MockIVehicleExtendRepository)(nil).Decrement), ctx, model)
}

// GetByModel mocks base method.
func (m *MockIVehicleExtendRepository) GetByModel(ctx context.Context, model string) (*models.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByModel", ctx, model)
	ret0, _ := ret[0].(*models.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByModel indicates an expected call of GetByModel.
func (mr *MockIVehicleExtendRepositoryMockRecorder) GetByModel(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByModel", reflect.TypeOf((*MockIVehicleExtendRepository)(nil).GetByModel), ctx, model)
}

// Increment mocks base method.
func (m *MockIVehicleExtendRepository) Increment(ctx context.Context, model string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increment indicates an expected call of Increment.
func (mr *MockIVehicleExtendRepositoryMockRecorder) Increment(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockIVehicleExtendRepository)(nil).Increment), ctx, model)
}

// SetTotal mocks base method.
func (m *MockIVehicleExtendRepository) SetTotal(ctx context.Context, model string, total int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTotal", ctx, model, total)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTotal indicates an expected call of SetTotal.
func (mr *MockIVehicleExtendRepositoryMockRecorder) SetTotal(ctx, model, total interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTotal", reflect.TypeOf((*MockIVehicleExtendRepository)(nil).SetTotal), ctx, model, total)
}
